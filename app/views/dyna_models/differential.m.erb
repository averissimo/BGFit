% Model Blackbox
% Copyright (C) <%= Time.now.year %>  <%= current_user.email %>
%
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; version 2
% of the License.
%
% program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

function [ F ] = <%=@dyna_model.model_m_name(false)%>( params,t )
%<%=@dyna_model.model_m_name(false)%> Summary of this function goes here
    % Extract each parameter from the model
    %  one of them must be the initial value for t = 0 / t = start
    <% init_p = nil %>
    <% @dyna_model.params.order(:code).reject{|param| param.output_only }.each_with_index do |p,i| -%>
    <%= p.code %>_  = params(<%= i+1 %>);
    <% init_p = p if p.initial_condition -%>
    <% end -%>
    
   function dxdt = ode(t,x,params_)
        <%- @dyna_model.params.order(:code).reject{|param| param.output_only || param.initial_condition }.each_with_index do |p,i| %>
        <%= p.code %>  = params(<%= i+1 %>);
        <%-end %>

        dxdt = <%= @dyna_model.equation.gsub(/;/,"") %>;
    end

    if isvector(t)
        tsim = t;
    else
        tsim = timeStep(t);
    end
    if length(tsim) == 1
        F = <%=init_p.code%>_;
    else
        % ODE15s solver
        try
            initial_condition = <%=init_p.code%>_; % << change initial condition
            f_parameters = [<%=@dyna_model.params.order(:code).reject{|param| param.output_only || param.initial_condition }.map {|m| m.code}.join(",")%>]; % << change parameters (might not include initial condition if it is not parameter for equation
            [null, Xsim] = ode15s(@ode, tsim' , initial_condition, odeset, f_parameters);
        catch
            err = lasterror();
            % with stiffer OD45 solver
            [null, Xsim] = ode45(@ode, tsim , initial_condition, odeset, f_parameters);
        end
        if isvector(t)
            F = Xsim';
        else
            F = Xsim(end);
        end
    end
end

%% model parameters are extracted below
<%- @dyna_model.params.order(:code).reject{|param| param.output_only}.each_with_index do |p,i| %>
<%= p.code %>  = params(<%= i+1 %>);
<%-end %>

%% function
F = <%= @dyna_model.equation %>
if size(F,1) > 1 F = F'; end

end