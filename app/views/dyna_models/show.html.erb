<%
	context_menu = [
		{
			:key => :stats, 
			:name => t('action.dyna_model.estimate'),
			:url => estimate_dyna_model_path(@dyna_model),
			:options => {
				:if => Proc.new { can?(:estimate, @dyna_model) },
				:container_class => 'menu',
				:class => "btn"
			}
		},
		{
			:key => :stats, 
			:name => t('action.dyna_model.statistical_data'),
			:url => stats_dyna_model_path(@dyna_model),
			:options => {
				:if => Proc.new { can?(:stats, @dyna_model) },
				:container_class => 'menu',
				:class => "btn"
			}
		},
		{
			:key => :edit, 
			:name => t('action.edit'), 
			:url => edit_dyna_model_path(@dyna_model),
			:options => {
				:if => Proc.new { can?(:edit, @dyna_model) },
				:container_class => 'menu',
				:class => ("text" if can?(:estimate, @dyna_model) || can?(:stats,@dyna_model))
			}
		},
		{
			:key => :new, 
			:name => t('action.dyna_model.new'),
			:url => new_dyna_model_param_path(@dyna_model),
			:options => {
				:if => Proc.new { can?(:update, @dyna_model) },
				:container_class => 'menu',
				:class => "text"
			}
		},
		{
			:key => :index, 
			:name => t('navigation.index', model: DynaModel.model_name.human.pluralize.downcase.capitalize), 
			:url => dyna_models_path,
			:options => {
				:container_class => 'menu',
				:class => ("text" if can?( :update,@dyna_model) || can?(:estimate, @dyna_model) || can?(:stats,@dyna_model))
			}
		},
		{
			:key => :back, 
			:name => t('navigation.back'),
			:url => url_for(:back),
			:options => {
				:unless => Proc.new { url_for(:back) == "javascript:history.back()" },
				:container_class => 'menu',
				:class => "text"
			}
		},
		{
			:key => :home, 
			:name => t('navigation.goto' , destination: t('navigation.home').downcase),
			:url => root_url,
			:options => {
				:if => Proc.new { url_for(:back) == "javascript:history.back()" },
				:container_class => 'menu',
				:class => "text"
			}
		}]
	menu = nil
	content_for(:context_menu) { menu = render_navigation :items => context_menu }
%>
<% content_for(:title) { t('title.detail' , model: DynaModel.model_name.human) } %>

<h1><%= @dyna_model.title %><%- if @dyna_model.only_owner_can_change then %> (locked by owner)<%- end %></h1>

<h3><%= DynaModel.human_attribute_name(:solver) %></h3>
<p>
<% if @dyna_model.solver.nil? || @dyna_model.solver.blank? %>
	<%= t('aux.not_defined')%>
<% else %>
  <%= simple_format (show ( @dyna_model.solver ) )%>
<% end %>
</p>

<h3><%= DynaModel.human_attribute_name(:estimation) %></h3>
<p>
<% if @dyna_model.estimation.nil? || @dyna_model.estimation.blank? %>
	<%= t('aux.not_defined')%>
<% else %>
  <%= simple_format (show ( @dyna_model.estimation) ) %>
<% end %>
</p>

<h3><%= DynaModel.human_attribute_name(:description) %></h3>
<p>
  <%- if @dyna_model.log_flag %>
  Log flag: true (all measurements that uses this model have their y-axis data transformed to log  (base e))<br/>
  ######################################################################################<br/>
  <%- end %>
  <%= simple_format (show (@dyna_model.description)) %>
</p>

<h3><%= DynaModel.human_attribute_name(:definition) %></h3>
<p>
  <%= simple_format (show (@dyna_model.definition)) %>
</p>

<h3><%= t('aux.listing')%> <%= pluralize(@dyna_model.params.length, DynaModel.human_attribute_name(:params).downcase.singularize ) %></h3>

<%= 
	collection_table(@dyna_model.params, :id => 'params' , :class => 'formatted dataTable dataTable') do |t|
		t.header :code,			Param.human_attribute_name(:code)
		t.header :human_title,	Param.human_attribute_name(:human_title)
		t.header :description,	Param.human_attribute_name(:description)
		t.header :bottom,		Param.human_attribute_name(:bottom)
		t.header :top,			Param.human_attribute_name(:top)
		t.header :output,		Param.human_attribute_name(:output)
		t.header :ic, 			Param.human_attribute_name(:ic)
		t.header :edit_h,		"", class: "no-sort"
		t.header :destroy_h,	"", class: "no-sort"

		t.rows.alternate = :odd
    	t.rows.each do |row, param, index|
			# Notice there's no need to explicitly define the title
			row.code			param.code
			row.human_title		param.human_title.html_safe
			row.output			param.output_only
			row.ic				param.initial_condition
			row.description		param.description_trimmed.gsub(/\n/, '<br/>')
			row.top				param.top
			row.bottom			param.bottom
			row.edit_h			link_to t('action.edit').downcase, [:edit,@dyna_model,param]
			row.destroy_h		link_to t('action.remove').downcase, [@dyna_model,param], confirm: t('action.confirm'), method: :delete
		end
	end
%>

<div class="menu">
	<%= menu %>
</div>

