<% 
	javascript 'https://www.google.com/jsapi'
	
	context_menu = [
		{
			:key => :new, 
			:name => t('.dyna'), 
			:url => new_measurement_proxy_dyna_model_path(@measurement),
			:options => {
				:if => Proc.new { can?(:update, @measurement) },
				:container_class => 'menu'
			}
		},
		{
			:key => :regression, 
			:name => t('.linear'), 
			:url => url_for([:regression,@experiment,@measurement]),
			:options => {
				:if => Proc.new { can?(:regression, @measurement) },
				:container_class => 'menu'
			}
		},
		{
			:key => :edit, 
			:name => t('action.edit'),
			:url => url_for([:edit,@experiment,@measurement]),
			:options => {
				:if => Proc.new { can?(:update, @measurement) },
				:container_class => 'menu',
				:class => "text"
			}
		},
		{
			:key => :csv, 
			:name => t('.csv'), 
			:url => experiment_measurement_path(@experiment,@measurement, :format => :csv),
			:options => {
				:container_class => 'menu',
				:class => "text"
			}
		},
		{
			:key => :new, 
			:name => t('.new-line'), 
			:url => new_measurement_line_path(@measurement),
			:options => {
				:if => Proc.new { can?(:update, @measurement) },
				:container_class => 'menu',
				:class => "text"
			}
		},
		{
			:key => :index, 
			:name => t('navigation.goto' , destination: Experiment.model_name.human.downcase), 
			:url => url_for([@model,@experiment]),
			:options => {
				:container_class => 'menu',
				:class => "text"
			}
		},
		{
			:key => :index, 
			:name => t('navigation.goto' , destination: Model.model_name.human.downcase), 
			:url => url_for(@model),
			:options => {
				:container_class => 'menu',
				:class => "text"
			}
		}]
	menu = nil
	content_for(:context_menu) { menu = render_navigation :items => context_menu }
	content_for(:title) { t('title.detail' , model: Measurement.model_name.human) }
%>

<h1><%= @measurement.experiment.title %>: <%= @measurement.title %></h1>

<h4>
	<%= @model.title %> model and part of <%= @experiment.title %> experiment
</h4>

<%= simple_format @model.description %>

<h3>Measured data (<%= pluralize(@measurement.lines.length, 'line')%>)</h3>
<%= 
	collection_table(@measurement.lines, :id => 'lines' , :class => 'formatted dataTable') do |t|
		t.header :x
		t.header :y
		t.header :z
		t.header :note
		t.header( :edit_h,		"", class: "no-sort") if can? :update, @measurement
		t.header( :destroy_h,	"", class: "no-sort") if can? :update, @measurement

		t.rows.alternate = :odd
    	t.rows.each do |row, line, index|
			# Notice there's no need to explicitly define the title
			row.x			line.x
			row.y			line.y
			row.z			line.z
			row.note		line.note
			row.edit_h		link_to t('action.edit').downcase, [:edit,@measurement,line] if can? :update, line
			row.destroy_h	link_to t('action.remove').downcase, [@measurement,line], confirm: 'Are you sure?', method: :delete if can? :update, line
		end
	end
%>

<div class="menu">
<%= menu %>
</div>

<h3><%= ProxyDynaModel.model_name.human.pluralize(@measurement.proxy_dyna_models.length) %> (<%= @measurement.proxy_dyna_models.length %>)</h3>
<%= 
	collection_table(@measurement.proxy_dyna_models, :id => 'proxy_dyna_,model' , :class => 'formatted dataTable') do |t|
		t.header :title,        DynaModel.model_name.human
		t.header :params,       Param.model_name.pluralize
		t.header :rmse,         ProxyDynaModel.human_attribute_name(:rmse)
		t.header :notes,        ProxyDynaModel.human_attribute_name(:note)
		t.header :show_h,		"", class: "no-sort"
		t.header(:edit_h,		"", class: "no-sort") if can? :update, @measurement
		t.header(:destroy_h,	"", class: "no-sort") if can? :update, @measurement

		t.rows.alternate = :odd
    	t.rows.each do |row, proxy_dyna_model, index|
			# Notice there's no need to explicitly define the title
			row.title		proxy_dyna_model.title_join
			row.rmse		proxy_dyna_model.round(:rmse), :class => "small"
			row.params      proxy_dyna_model.params_to_string.html_safe, :class => "small"
			row.notes		{ if proxy_dyna_model.notes.nil? then "" else word_wrap(proxy_dyna_model.notes,:line_width => 40).gsub(/\n/, '<br/>') end }
			row.show_h		link_to t('action.show').downcase, [proxy_dyna_model] if can? :read, proxy_dyna_model
			row.edit_h		link_to t('action.edit').downcase, [:edit,proxy_dyna_model] if can? :update, proxy_dyna_model
			row.destroy_h	link_to t('action.remove').downcase, [proxy_dyna_model], confirm: 'Are you sure?', method: :delete if can? :update, proxy_dyna_model
		end
	end
%>

<h3><%= DynaModel.model_name.human %> and <%=Measurement.model_name.human.downcase%> plots</h3>

<div style="display:none;" class="proxy_dyna_model_chart auto-load" >	
	<div class="chart">
		 <br/>
		 <div class="one_tab">loading...</div>
	</div>
	<div class="options" style="display:none;text-align: right;"><a class="download" href='#'>Download chart as .svg</a></div>
	<div style="display:none;" class="model-data">
		<% @measurement.proxy_dyna_models.each do |pdm| %>
		<div data-source="<%= proxy_dyna_model_path(pdm, :format => :json) %>"><%=pdm.title_join%></div>
		<% end %>
	</div>
	<div style="display:none;" class="measurement-data">
		<div data-source="<%= experiment_measurement_path(@measurement.experiment,@measurement,:format=>:json) %>"><%= @measurement.title %></div> 
	</div>

</div>