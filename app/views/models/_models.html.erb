<div>
<h1>Listing <%= pluralize(@models.length, Model.model_name.human.downcase)%></h1>

<%= 
    collection_table(@models, :id => 'models' , :class => 'formatted dataTable-no_sort' , "data-sig" => data_sig(@models) ) do |t|
        t.header :created_at,	sortable("created_at",Model,"",nil,Model.human_attribute_name(:created_at).downcase)
        t.header :updated_at,	sortable("updated_at",Model,"",nil,Model.human_attribute_name(:updated_at).downcase)
        t.header :title,        sortable(Model.human_attribute_name(:title).downcase,Model,"",nil,Model.human_attribute_name(:title).downcase)
        t.header :description,  sortable(Model.human_attribute_name(:description).downcase,Model)
        t.header :owner,        Model.human_attribute_name(:owner) if can_column? :read , @models
        t.header :teams,        Group.model_name.human.pluralize if can_column? :read , @models
        t.header :show_h,       "", class: "no-sort" if can_column? :read , @models
        t.header :edit_h,       "", class: "no-sort" if (edit_p = can_column? :update , @models)
        t.header :destroy_h,    "", class: "no-sort" if edit_p

        t.rows.alternate = :odd
        t.rows.each do |row, model, index|
            # Notice there's no need to explicitly define the title
            row.created_at		model.created_at.strftime("%d/%m/%Y"), class: "small"
            row.updated_at		model.updated_at.strftime("%d/%m/%Y"), class: "small"
            row.title           word_wrap(model.title,:line_width => 40).gsub(/\n/, '<br/>')
            row.description     model.description_trimmed.gsub(/\n/, '<br/>')
            row.owner           model.owner.email_trimmed , class: "small"
            row.teams           word_wrap(model.accessibles.map { |a| a.group.title }.join(", "),line_width: 40), class: "small"
            row.show_h          link_to t('action.show').downcase, model if can? :read, model
            row.edit_h          link_to t('action.edit').downcase, [:edit,model] if can? :update, model
            row.destroy_h       link_to t('action.remove').downcase, model, confirm: 'Are you sure?', method: :delete if can? :destroy, model
        end
    end
%>

<%= paginate @models , remote: remote_activated? %>
</div>